type Cliente {
        id: ID
        nombre: String
        apellido : String
        empresa: String
        email: String
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
    }

    type Email {
        email: String
    }

    type Query {
        getClientes(limite: Int) : [Cliente]
        getCliente(id: ID): Cliente
    }

    type Pedido {
        producto: String
        precio: Int
    }

    enum TipoCliente {
        BASICO
        PREMIUM
    }


    input PedidoInput {
        producto: String
        precio: Int
    }

    input EmailInput {
        email: String
    }

""" Campos para los clientes nuevos """
    input ClienteInput {
        id: ID
        nombre: String!
        apellido : String!
        empresa: String!
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput]
        email: String

    }

    type Mutation {
        # Nombre de resolver, input con datos y valor que retorna
        crearCliente(input: ClienteInput) : Cliente
        actualizarCliente(input: ClienteInput) : Cliente
        eliminarCliente( id: ID! ) : String
    }