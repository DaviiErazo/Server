type Cliente {
        id: ID
        nombre: String
        apellido : String
        empresa: String
        emails: [Email]
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
    }

    type Email {
        email: String
    }

    type Producto {
        id: ID
        nombre: String!
        precio: Int!
        stock: Int!
    }

    type Query {
        getClientes(limite: Int, offset: Int) : [Cliente]
        getCliente(id: ID): Cliente
        totalClientes: String

        #Productos

        obtenerProductos(limite: Int, offset: Int) : [Producto]
        obtenerProducto(id: ID!) : Producto
        totalProductos: String

    }

    type Pedido {
        producto: String
        precio: Int
    }

    enum TipoCliente {
        BASICO
        PREMIUM
    }


    input PedidoInput {
        producto: String
        precio: Int
    }

    input EmailInput {
        email: String
    }

""" Campos para los clientes nuevos """
    input ClienteInput {
        id: ID
        nombre: String!
        apellido : String!
        empresa: String!
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput]
        emails: [EmailInput]

    }

    input ProductoInput{
        id: ID
        nombre: String!
        precio: Int!
        stock: Int!
    }

    type Mutation {
        # Nombre de resolver, input con datos y valor que retorna
        crearCliente(input: ClienteInput) : Cliente
        actualizarCliente(input: ClienteInput) : Cliente
        eliminarCliente( id: ID! ) : String

        # Productos

        nuevoProducto(input: ProductoInput) : Producto
        actualizarProducto(input: ProductoInput) : Producto
        eliminarProducto( id: ID! ) : String
    }

